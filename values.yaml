### Global Variables ###
environment: test                   # prod/stage/test
awsRegion: us-east-1                # Default: us-east-1
global_cm:
  create: true
########################

<deployment_name>:
  environment: test                 # prod/stage/test
  awsRegion: us-east-1              # Default: us-east-1
  awsaccountid: "************"      # ************
  nameOverride: "<deployment_name>"         # Name of the MS
  fullnameOverride: "<deployment_name>"     # Name of the MS
  team: "<team>"                    # [devops, application, collection, data, ds, risk, users]
  component:                        # choose from status page: https://status.int.cybersixgill.com/

  replicaCount: 1

  image:
    repository: sixgilldocker/<dockerrepo>
    pullPolicy: IfNotPresent
    tag: ms-template-1

  deploymentLabels: {}

  containerName: "<container_name>"

  imagePullSecrets:
    - name: sixgilldockerdeploy

  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
    type: RollingUpdate

  podLabels: {}
  initContainers:
  []
  # - name: sync
  #   image: busybox
  #   command: ['do', 'something']

  runCommand:
    overRide: false
    run:
      command:
        - run.sh
      args:
        - arg1

  service:
    name: <svc>
    enabled: <is_rest>
    type: ClusterIP
    port: <port>
    #nodePort: 30xxx


  ingress:
    enabled: <is_rest>
    className: "nginx"
    pathType: Prefix
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: <ingress>.test.int.cybersixgill.com
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  volumes:
    enabled: true
    cm:
      enabled: true
      mounts:
        file1:
          mountPath: <settings_path>/settings.yaml
          subPath: settings.yaml
    secrets:
      enabled: false
      secretName: <secrets_name>
      mountPath: <secrets_path>/secrets.yaml
      subPath: secrets.yaml
    extraVolumeMounts:
      enabled: false
    #mounts: |-
    #  - mountPath: /extra1
    #    name: extra1
    #volumes: |
    #   - name: extra1
    #     configMap:
    #       name: test
  efs:
    createVolume: false
    use: false
    pvc:
      volume1:
        volume: storage-<deployment_name>
        name: <deployment_name>
        mountPath: /var/repos
        accessModes: ReadWriteMany
        storage: 1Mi
        annotations:
          volume.beta.kubernetes.io/storage-class: "aws-efs"

  ports:
    enabled: <is_rest>
    portname: http
    containerPort: <port>
    protocol: TCP

  extraEnvs: []

  terminationGracePeriodSeconds: 
    enabled: false
    value: 45 #in seconds

  livenessProbeEnabled: <probe>
  livenessProbe:
    failureThreshold: 5
    httpGet:
      path: <probe_path>
      port: <port>
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 7

  readinessProbeEnabled: <probe>
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: <probe_path>
      port: <port>
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 2

  resources:
    limits:
      cpu: <cpu_limit> m
      memory: <memory_limit> Mi
    requests:
      cpu: <cpu_request> m
      memory: <memory_request> Mi

  autoscaling:
    enabled: <hpa>
    minReplicas: <minreplicas>
    maxReplicas: <maxreplicas>
    targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 60

  customMetricsAutoscaling:
    enabled: false
    type: kafka
    pollingInterval: 30
    minReplicaCount: 1                              # Optional. Default: 0
    maxReplicaCount: 2                              # Optional. Default: 100


  nodeSelector: {}
  tolerations: []
  affinity: {}
  antiAffinity: "none"                              # none - test /soft - stage /hard - prod
  nodeAffinity: {}
  antiAffinityTopologyKey: "kubernetes.io/hostname"
  podAnnotations: {}

  podSecurityContext: 
    fsGroup: 10001
    runAsNonRoot: true

  securityContext:
    runAsUser: 10001
    allowPrivilegeEscalation: false

  additionalContainers:
    enabled: false
  #  config:
  #    - args:
  #      - --stats.uri=http://localhost:1717
  #      image: timonwong/uwsgi-exporter
  #      imagePullPolicy: Always
  #      name: uwsgi-exporter
  #      resources:
  #        requests:
  #          cpu: 10m
  #          memory: 10Mi
  #        limits:
  #          cpu: 100m
  #          memory: 25Mi
  #      livenessProbe:
  #        httpGet:
  #          path: /-/healthy
  #          port: 9117

  additionalService:
    enabled: false
  #  name: sixgill-ms-metrics
  #  type: ClusterIP
  #  port: 9090
  #  nodePort: xxxxx
  #  targetPort: 9090
  #  portName: metrics
  #  protocol: tcp

  # prometheus service monitor
  serviceMonitor:
      enabled: false
  #    namespace: "cattle-prometheus"
  #    interval: "30s"
  #    scrapeTimeout: "5s"
  #    labels: {}
  #    selector: {}
  #    relabelings: []
  #    metricRelabelings: []
  #    honorLabels: false
  #    jobLabel: ""
  #    path: /metrics
  #    port: 9090
  # kubernetes service account

  serviceaccount:
    enabled: <use_sa>                    # Assign a service account to the deployment.
    create: <create_sa>                     # Create a new service account.
    name: ""                          # If you are using more than one deployment and want to use only one global service account, make sure the service account name is identical on all deployments.
    rolearn: ""                       # Assign the role ARN that we created to the service account.

  iamRole:
    enabled: <create_iamrole>         # Create a new IAM role.
    name: ""                          # If you are using more than one deployment and want to use only one global IAM role, make sure the iamRole name and rolearn is identical on all deployments.
    description: "microservice access role"
    policies: []
    atlasAccess:
      enabled: <use_atlas>
      atlasAccountId: "************"  # Default: "************"
      uniqueExternalId: "<atlas_ext_id>"